program{
    producto1 := Producto(nombre <- "jabon",marca <- "Dove",precio <- 23)
    producto2 := Producto(nombre <- "aceite",marca <- "Marolio",precio <- 55)
    producto3 := Producto(nombre <- "pan",marca <- "Bimbo",precio <- 122)
    listaProductos1 := [producto1,producto2,producto3]
    listaProductos2 := [producto1,producto3]
    cliente1 := Cliente(dni <- "12-222-333", tipoDePago <- Tarjeta, productos <- listaProductos1)
    cliente2 := Cliente(dni <- "19-111-555", tipoDePago <- Efectivo, productos <- listaProductos2)
    cliente3 := Cliente(dni <- "11-123-456", tipoDePago <- Tarjeta, productos <- listaProductos1)
    listaDeClientes1 := [cliente1,cliente2]
    listaDeClientes2 := [cliente3]
    caja1 := Caja(número <- 123, clientesEsperando <- listaDeClientes1,aceptaPagos <- [Tarjeta,Efectivo],esRápida <- True,facturado <- 1)
    caja2 := Caja(número <- 225, clientesEsperando <- listaDeClientes2,aceptaPagos <- [Tarjeta,Efectivo],esRápida <- True,facturado <- 1)
    listaDeCajas:=[caja1,caja2]
    return(
        gobsMart_conCliente_cambiaACaja_(listaDeCajas,"11-123-456",123)
        )
}

type TipoDePago is variant {
/* PROP: modelar Tipos de pago aceptados */
case Tarjeta {}
case MartPago {}
case Efectivo {}
}
type Producto is record{
/* PROP: modelar productos
INV.REP.: precio > 0 */
field nombre // String
field marca // String
field precio // Número
}
type Cliente is record {
/* PROP: modelar clientes */
field dni // String
field tipoDePago // TipoDePago
field productos // [Producto]
}
type Caja is record {
/* PROP: modelar cajas
INV.REP.: número > 0
facturado >= 0 */
field número // Número
field clientesEsperando // [Cliente]
field aceptaPagos // [TipoDePago]
field esRápida // Bool
field facturado // Número
}
-----------------------------------------------------------------------------------------------------------------
function cantidadDeClientesEsperandoEn_(unaCaja){
    /*
    Proposito:
        Describe la cantidad de clientes que estan esperando en la caja dada
    Precondicion:
        ninguna
    Tipo:Numero
    Paramentro:
        *unaCaja*:Caja
    */
    cantidadDeClientesEsperando:=0
    foreach clientes in clientesEsperando(unaCaja){
        cantidadDeClientesEsperando := cantidadDeClientesEsperando + 1
    }
    return(cantidadDeClientesEsperando)
    
}
-----------------------------------------------------------------------------------------------------------------
function cajaMenosOcupadaDe_(cajas){
    /*
    Proposito:
        Describe la caja que tiene menos clientes esperando en las cajas *cajas*,si hay mas de una caja que tiene
        la misma cantidad de clientes esperando, describe la primera que encuentre.
    Precondicion:
        tiene que haber al menos una caja en la lista dada
    Tipo:Caja
    Paramentro:
        *cajas*:[Caja]
    */
    cajaConMenosClientesHastaAhora := primero(cajas)
    foreach caja in cajas{
        cajaConMenosClientesHastaAhora := caja_TieneMenosClientesEsperandoQue_(cajaConMenosClientesHastaAhora,caja)
    }
    return(cajaConMenosClientesHastaAhora)
    
}

function caja_TieneMenosClientesEsperandoQue_(primeraCaja,segundaCaja){
    /*
    Proposito:
        Describe la caja con menos clientes esperando entre las cajas dadas
    Precondicion:
        ninguna
    Tipo:Caja
    Paramentro:
        primeraCaja,segundaCaja: Caja
    */
    
    return(
            choose  primeraCaja     when(cantidadDeClientesEsperandoEn_(primeraCaja)>= cantidadDeClientesEsperandoEn_(segundaCaja))
                    segundaCaja     otherwise
        )
    
}
-----------------------------------------------------------------------------------------------------------------
//C)
function gobsMart_conIngresoDe_aCaja_(listaDeCajas,cliente,numeroCaja){
    /*
    Proposito:
        Describe la misma lista de cajas dada pero actualizando la caja del 
        número dado para registrar que el cliente dado ingresó en la misma
    Precondicion:
        la caja con el numero *numeroCaja* tiene que estar en la lista de caja *listaDeCajas*
    Tipo:[Caja]
    Paramentro:
        *listaDeCajas*:[Caja]
        *cliente*:Cliente
        *numeroCaja*:Numero
    */
    
    listaDeCajasHastaAhora:=[]
    
    foreach caja in listaDeCajas{
        listaDeCajasHastaAhora := listaDeCajasHastaAhora ++ [siCaja_conIngresoDe_aCaja_(caja,cliente,numeroCaja)]
    }
    
    return(listaDeCajasHastaAhora)
    
}

function siCaja_conIngresoDe_aCaja_(caja,cliente,numeroCaja){
    /*
    Proposito:
        Describe la caja *caja* con el cliente agregado si tiene el numero *numeroCaja*, sino describe la misma caja dada
    Precondicion:
    Ninguna
    Tipo:Caja
    Paramentro:
        *listaDeCajas*:Caja
        *cliente*:Cliente
        *numeroCaja*:Numero
    */
    return(
        choose  agregarAlCliente_ALaCaja_(cliente,caja) when(número(caja)==numeroCaja)
                caja    otherwise
        )
}

function agregarAlCliente_ALaCaja_(cliente,caja){
    /*
    Proposito:
        Describe la caja dada con el cliente en la lista de clientes esperando
    Precondicion:
        ninguna
    Tipo:
        Caja
    Paramentro:
        *caja*:Caja
        *numeroCaja*:Numero
    */
    return(
            Caja(caja | clientesEsperando <- clientesEsperando(caja) ++ [cliente])
        )
}

------------------------------------------------------------------------------------------------------------------
//d
function gobsMart_conIngresosDe_(listaDeCajas,listaDeCliente){
    /*
    Proposito:
        Describe una lista de cajas actualizada, donde cada cliente de la lista
    dada ingresó a una caja que acepta el medio de pago que posee, y que esté
    menos ocupada en el momento que ingresa.
    Precondicion:
        Ninguna
    Tipo:[Caja]
    Paramentro:
        *listaDeCajas*:[Caja]
        *cliente*:[Cliente]
    */
    listaDeCajasHastaAhora := listaDeCajas
    
    foreach cliente in listaDeCliente{
        
        listaDeCajasHastaAhora := 
            gobsMart_conIngresoDe_aCaja_(listaDeCajasHastaAhora,cliente,número(cajaMenosOcupadaDe_(cajas_ConTipoDePago_(listaDeCajas,tipoDePago(cliente)))))
    }
    
    
    return(listaDeCajasHastaAhora)
    
}

function cajas_ConTipoDePago_(listaDeCajas,tipoDePago){
    /*
    Proposito:
        Describe la lista de cajas *listaDeCajas* pero con solamente con el tipo de pago *tipoDePago*,
        sino hay ninguna entonces describe una lista vacia
    Precondicion:
        Ninguna
    Tipo:[Caja]
    Paramentro:
        *listaDeCajas*:[Caja]
        *tipoDePago*:TipoDePago
    */
    listaDeCajasConElTipoDePago := []
    foreach caja    in  listaDeCajas{
        listaDeCajasConElTipoDePago := listaDeCajasConElTipoDePago ++ singular_Si_(caja,contiene_A_(aceptaPagos(caja),tipoDePago))
    }
    return(listaDeCajasConElTipoDePago)
}

function contiene_A_(lista,elementoAVerificar){
    /*
    Proposito
        Indica si en la lista *lista* se encuentra el elemento *elementoAVerificar*
    Precondicion
        ninguna
    Tipo:
       Booleano
    Parametro:
        lista: [Elemento]
        elementoAVerificar: Elemento
    */
    listaHastaAhora:=lista
    
    while(not esVacía(listaHastaAhora) && not primero(listaHastaAhora)==elementoAVerificar ){
        listaHastaAhora:= resto(listaHastaAhora)
    }
    
    return(not esVacía(listaHastaAhora) && primero(listaHastaAhora)==elementoAVerificar)
}

function singular_Si_(unElemento,condicion){
    /*
    Prop:
        Describe una lista singular con *unElemento* si se cumple
        la condicion, sino describe una lista vacia
    Precondicion:
        ninguna
    Parametro
    *unElemento*:Elemento
    *condicion*:Booleano
    
    */
    
    return(
            choose [unElemento] when (condicion)
                    []          otherwise
        )
}
--------------------------------------------------- E) ---------------------------------------------------------------


function sumatoriaDe_(listaDeNúmeros){
/*PROPÓSITO: Describe la suma de todos los elementos de la lista dada, si la lista es
vacía devuelve 0.
PRECONDICIONES: ninguna
PARÁMETROS: *listaDeNúmeros*:[Numero]
RESULTADO: Número.
*/
    sumatoria:=0
    foreach numero in listaDeNúmeros{
        sumatoria := sumatoria + numero
    }
    return(sumatoria)
}


function caja_conPrimeroFacturado(caja){
    /*
    Proposito:
        Describe la caja resultante de facturar al primero de los clientes de la caja dada
        (o sea, el cliente se retiró y la caja actualizó sus datos).
    Precondicion:
        Ninguna
    Tipo:[Caja]
    Paramentro:
        *caja*:Caja
    Observaciones:
        Se puede suponer que el cliente eligió bien la caja
        de acuerdo a su tipo de pago.
    */
    listaDeClientesDeLaCaja := clientesEsperando(caja)
    montoFacturado:=0
    if(not esVacía(listaDeCajasHastaAhora)){
        montoFacturado := montoTotalDelCliente_(primero(listaDeCajasHastaAhora))
    }
    
    return(
        Caja(caja | facturado <- facturado(caja) + montoFacturado,clientesEsperando <- resto(listaDeClientesDeLaCaja))
        )
}

function montoTotalDelCliente_(cliente){
    /*
    Proposito:
        Describe el monto total de los productos que tiene el cliente dada.
    Precondicion:
        Ninguna
    Tipo:
        Numero
    Paramentro:
        cliente:Cliente
    */
    montoFacturadoHastaAhora := 0
    foreach producto in productos(cliente){
        montoFacturadoHastaAhora := montoFacturadoHastaAhora + precio(producto)
    }
    
    return(montoFacturadoHastaAhora)
}

--------------------------------------------------- F) ---------------------------------------------------------------
function gobsMart_conCliente_cambiaACaja_(listaDeCajas,dniCliente,numeroDeCaja){
    /*
    Proposito:
        Describe la lista de cliente dada actualizada, cambiando al cliente con el dni *dniCliente* a la caja con el numero *numeroDeCaja*
    Precondicion:
        El cliente con el dni dado tiene que estar en alguna caja de la lista dada
    Tipo:
        [Caja]
    Paramentro:
        *listaDeCajas*:[Caja]
        *dniCliente*:String
        *numeroDeCaja*:Numero
    */
    cliente := clienteConElDni_EnLasCajas_(dniCliente,listaDeCajas) //solo lo pongo en una variable para que quede mas claro
    
    return(
        gobsMart_conIngresoDe_aCaja_(gobsMart_conEgresoDe_aCaja_(listaDeCajas,cliente),cliente,numeroDeCaja)
        )
    
}

function gobsMart_conEgresoDe_aCaja_(listaDeCajas,cliente){
    /*
    Proposito:
        Describe la misma lista de cajas dada pero actualizando la caja del 
        número *numeroCaja* para sacar al cliente *cliente* que estaba en la misma
    Precondicion:
        la caja con el numero *numeroCaja* tiene que estar en la lista de caja *listaDeCajas*
    Tipo:[Caja]
    Paramentro:
        *listaDeCajas*:[Caja]
        *cliente*:Cliente
        *numeroCaja*:Numero
    */
    listaDeCajasHastaAhora := []
    foreach caja in listaDeCajas{
        listaDeCajasHastaAhora := listaDeCajasHastaAhora ++ sinCliente_SiCaja_Es_(cliente,caja)
    }
    
    return(listaDeCajasHastaAhora)
}

function sinCliente_SiCaja_Es_(cliente,caja){
    /*
    Proposito:
        Describe la caja *caja* con el numero *numeroCaja* sin el cliente *cliente*, sino describe la caja *caja*
        sin modificaciones
    Precondicion:
        ninguna
    Tipo:Caja
    Paramentro:
        *listaDeCajas*:[Caja]
        *cliente*:Cliente
        *numeroCaja*:Numero
    */
    
    return(
            choose  [sinCliente_EnLaCaja_(cliente,caja)]  when( contiene_A_(clientesEsperando(caja),cliente) )
                    [caja]    otherwise
        )
}

function sinCliente_EnLaCaja_(clienteASacar,caja){
    /*
    Proposito:
        Describe la caja *caja* sin el cliente *cliente*
    Precondicion:
        El cliente *cliente* tiene que estar en la caja dada
    Tipo:Caja
    Paramentro:
        *listaDeCajas*:[Caja]
        *clienteASacar*:Cliente
    */
    clientesEsperandoHastaAhora:=[]
    foreach cliente in clientesEsperando(caja){
        clientesEsperandoHastaAhora := clientesEsperandoHastaAhora ++ singular_Si_(cliente, dni(clienteASacar) /= dni(cliente))
    }
    return(Caja(caja | clientesEsperando <- clientesEsperandoHastaAhora))
}
------------------------
function clienteConElDni_EnLasCajas_(dniCliente,listaDeCajas){
    /*
    Proposito:
        Describe el cliente con el dni *dniCliente* que se encuentra en la lista *listaDeCajas*, sino
        lo encuentra describe una lista vacia
    Precondicion:
        El cliente con el dni *dniCliente* tiene que estar en alguna caja de la lista dada
    Tipo:
        Cliente
    Paramentro:
        *listaDeCajas*:[Caja]
        *dniCliente*:String
    */
    listaDeCajasHastaAhora := listaDeCajas
    clientesEsperandoCaja :=[]
    while(not esVacía(listaDeCajasHastaAhora) && esVacía(clientesEsperandoCaja)){
        clientesEsperandoCaja := clientesEsperandoCaja ++ clienteConElDni_EnListaDeEspera_(dniCliente,clientesEsperando(primero(listaDeCajasHastaAhora)))
        listaDeCajasHastaAhora := resto(listaDeCajasHastaAhora)
    }
    
    return(primero(clientesEsperandoCaja))
}
function clienteConElDni_EnListaDeEspera_(dniCliente,clientesEsperando){
    /*
    Proposito:
        Describe el cliente con el dni *dniCliente* que se encuentra en la lista *clientesEsperando*, sino
        lo encuentra describe una lista vacia
    Precondicion:
        ninguna
    Tipo:
        [Cliente]
    Paramentro:
        *listaDeCajas*:[Cliente]
        *dniCliente*:String
    */
    clienteEsperando:=[]
    foreach cliente in clientesEsperando{
        clienteEsperando := clienteEsperando ++ singular_Si_(cliente,esCliente_ConDni_(cliente,dniCliente))
    }
    return(clienteEsperando)
} 

function esCliente_ConDni_(cliente,dni){
    /*
    Proposito:
        Indica si el cliente dado tiene el dni dado
    Precondicion:
    ninguna
    Tipo:
        Booleano
    Paramentro:
        *cliente*:Cliente
        *dni*:String
    */
    return(
        dni(cliente) == dni
        )
}
----------------------------------- G ------------------------------
function fila_ConAumentoDePrecioAMarolio(clientes){
    /*
    Proposito:
        Describe la lista de clientes dada donde se aumente en 10 pesos todos los
        productos de la marca “Marolio” que tengan en su poder.
    Precondicion:
        ninguna
    Tipo:
        [Cliente]
    Paramentro:
        *clientes*:[Cliente]
    */
    clientesHastaAhora:= []
    foreach cliente in clientes{
        clientesHastaAhora := clientesHastaAhora ++ [Cliente(cliente | productos <- productos_ConAumentoDePrecioAMarolio(productos(cliente)))]
    }
    return(clientesHastaAhora)
}

function productos_ConAumentoDePrecioAMarolio(productos){
    /*
    Proposito:
        Describe la lista de productos dada donde se aumente en 10 pesos todos los
        productos de la marca “Marolio” que tengan en su poder.
    Precondicion:
        ninguna
    Tipo:
        [Producto]
    Paramentro:
        *productos*:[Producto]
    */
    productosHastaAhora:= []
    foreach producto in productos{
        productosHastaAhora := productosHastaAhora ++ [producto_ConAumentoDePrecioAMarolio(producto)]
    }
    return(productosHastaAhora)
}

function producto_ConAumentoDePrecioAMarolio(producto){
    /*
    Proposito:
        Describe el producto dada donde se aumente en 10 pesos si es de la marca “Marolio” sino describe el producto dado
    Precondicion:
        ninguna
    Tipo:
        Producto
    Paramentro:
        *producto*:Producto
    */
    
    return(
        choose  Producto(producto | precio <- precio(producto) + 10) when (marca(producto) == "Dove")
                producto    otherwise
        )
}








